import os
import json
from flask import Flask, request, jsonify, render_template
import google.generativeai as genai
from dotenv import load_dotenv

# Carrega a vari√°vel de ambiente (sua chave de API) do arquivo .env
load_dotenv()

# Configura o Flask
app = Flask(__name__)

# Configura a API do Gemini com a chave
try:
    genai.configure(api_key=os.environ.get("GEMINI_API_KEY"))
except Exception as e:
    print(f"Erro ao configurar a API do Gemini. Verifique sua chave de API no arquivo .env. Erro: {e}")

# Rota principal que exibe a p√°gina HTML
@app.route('/')
def index():
    return render_template('index.html')

# Rota que vai gerar as descri√ß√µes
@app.route('/gerar-descricoes', methods=['POST'])
def gerar_descricoes():
    # Pega as informa√ß√µes do carro enviadas pelo front-end
    dados_carro = request.json['info_carro']

    # Se a entrada estiver vazia, retorna um erro
    if not dados_carro:
        return jsonify({'error': 'Por favor, insira as informa√ß√µes do ve√≠culo.'}), 400

    # Monta o prompt para o Gemini
    # Esta √© a parte mais importante: damos instru√ß√µes claras para a IA
    prompt = f"""
    Voc√™ √© um assistente especialista em criar descri√ß√µes de carros para vendas em uma loja chamada Guaru Prime.
    Analise as informa√ß√µes do carro a seguir e gere dois textos, um para "Marketplace" e outro para "Redes Sociais", seguindo EXATAMENTE os modelos fornecidos abaixo.
    Extraia todas as informa√ß√µes necess√°rias do texto de entrada. Se alguma informa√ß√£o espec√≠fica n√£o for fornecida (ex: n√∫mero de portas, cor), deixe o campo correspondente como "[n√£o informado]".

    **Informa√ß√µes do carro fornecidas pelo usu√°rio:**
    ---
    {dados_carro}
    ---

    **MODELO PARA MARKETPLACE:**
    ---
    [Marca e Modelo] [Vers√£o] [Ano] | [Combust√≠vel] | [C√¢mbio]

    [Breve descri√ß√£o chamativa com pontos fortes do ve√≠culo. Ex: Hatch compacto, econ√¥mico e ideal para o dia a dia. √ìtima op√ß√£o para quem busca conforto e baixo custo de manuten√ß√£o.]

    Informa√ß√µes do ve√≠culo:

    Ano: [Ano]
    Cor: [Cor]
    Combust√≠vel: [Combust√≠vel]
    Quilometragem: [XX.XXX] km
    C√¢mbio: [Manual ou Autom√°tico]
    Motoriza√ß√£o: [1.X]
    N√∫mero de portas: [4]
    Final da placa: [XX]

    Principais equipamentos:

    Ar-condicionado
    Dire√ß√£o el√©trica/hidr√°ulica
    Vidros el√©tricos
    Travas el√©tricas
    Retrovisores el√©tricos
    Central multim√≠dia
    C√¢mera de r√©
    Sensores de estacionamento
    Bancos em couro
    Rodas de liga leve
    Far√≥is de neblina
    Airbags
    Freios ABS

    [Frase final de refor√ßo. Ex: Ve√≠culo em √≥timo estado de conserva√ß√£o, ideal para quem busca economia, conforto e seguran√ßa.]
    ---

    **MODELO PARA REDES SOCIAIS:**
    ---
    [Marca e Modelo] - [Vers√£o] [Motor]

    Ano: [Ano]
    [Quilometragem] Km Rodados
    WhatsApp: 11 2440-2166

    Os melhores seminovos de Guarulhos - SP üöó
    Olha que incr√≠vel esse [tipo de carro], complet√≠ssimo, um SONHO!! üíô‚ú®

    ‚úî Flex
    ‚úî Central Multim√≠dia
    ‚úî Motor [1.X]
    ‚úî C√¢mbio [Autom√°tico ou Manual]
    ‚úî Ar-condicionado
    ‚úî Dire√ß√£o [El√©trica ou Hidr√°ulica]
    ‚úî C√¢mera de R√©
    ‚úî Sensores de Estacionamento
    ‚úî Vidros El√©tricos
    ‚úî Travas El√©tricas
    ‚úî Airbags
    ‚úî Freios ABS
    ‚úî Rodas de Liga Leve

    Tamb√©m aceitamos carros na troca üöó
    Agende sua visita agora! üèÉ‚Äç‚ôÇÔ∏è

    üìç AutoShopping Internacional Guarulhos | R. Anton Philips, 186 | Pr√©dio B, Vila Herm√≠nia - Guarulhos/SP (Localizado no 2¬∞ piso pr√≥ximo √† Wincar)

    Mais informa√ß√µes no link da nossa bio üî•

    #guaruprime #carros #guarulhos #autoshoppinginternacional #multimarcas #seucarronovo #carrobarato #[marca] #[modelo] #[versao] #fotosdecarros
    ---

    Retorne a resposta em formato JSON com duas chaves: "marketplace" e "redes_sociais".
    """

    try:
        # Inicializa o modelo do Gemini
        model = genai.GenerativeModel('gemini-1.5-flash')
        # Gera o conte√∫do
        response = model.generate_content(prompt)
        
        # Limpa e converte a resposta para JSON
        # √Äs vezes a IA retorna o JSON dentro de um bloco de c√≥digo, ent√£o limpamos isso.
        cleaned_response = response.text.strip().replace("```json", "").replace("```", "")
        parsed_json = json.loads(cleaned_response)

        # Retorna o JSON para o front-end
        return jsonify(parsed_json)

    except Exception as e:
        # Em caso de erro na API
        print(f"Erro ao chamar a API do Gemini: {e}")
        return jsonify({'error': f'Ocorreu um erro ao gerar as descri√ß√µes: {e}'}), 500

# Roda o aplicativo
if __name__ == '__main__':
    app.run(debug=True)